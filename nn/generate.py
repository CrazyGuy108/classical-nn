from classical_nn import gm, noise_length
from create_midi import create_midi
from mid import int_to_note, n_vocab
import numpy as np

def get_noise_vector():
    return np.random.uniform(size=(1, noise_length))

# generates an amount of notes using the generator
def generate(g_notes=None):
    if g_notes is None:
        g_notes = np.random.randint(100, 1000)
    noise_vector = get_noise_vector()
    g_in = np.full(shape=(1, g_notes, noise_length), fill_value=noise_vector)
    return gm.predict(g_in, batch_size=1)

# plays a new midi file generated by the generator model
def play_generated(outfile=None):
    generated_song = generate()[0]
    processed_song = []
    for note_data in generated_song:
        processed_song.append([int_to_note[int(note_data[0] * n_vocab)],
                    note_data[1], note_data[2]])
    create_midi(processed_song, outfile)
